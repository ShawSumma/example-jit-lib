
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wanalyzer-va-list-exhausted"
#include <dasm_proto.h>
#include <dasm_x86.h>
#pragma GCC diagnostic pop

|.arch x64

|.section code

#if _WIN32
#include <Windows.h>
#else
#include <sys/mman.h>
#if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
#define MAP_ANONYMOUS MAP_ANON
#endif
#endif

static inline void *dasm_emit(dasm_State** d) {
  size_t sz;
  void* buf;
  dasm_link(d, &sz);
#ifdef _WIN32
  buf = VirtualAlloc(0, sz, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
#else
  buf = mmap(0, sz, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
#endif
  dasm_encode(d, buf);
#ifdef _WIN32
  {DWORD dwOld; VirtualProtect(buf, sz, PAGE_EXECUTE_READ, &dwOld); }
#else
  mprotect(buf, sz, PROT_READ | PROT_EXEC);
#endif
  return buf;
}

#define Dst (&jit->dst)

typedef struct {
  const char *const *externs;
  dasm_State *dst;
} jit_t;

|.macro begin
  |.externnames externs
  || jit_t *jit = &(jit_t) { &externs[0], NULL };
  || dasm_init(Dst, DASM_MAXSECTION);
  |.globals lbl_
  || size_t (*labels[lbl__MAX])();
  || dasm_setupglobal(Dst, (void *) labels, lbl__MAX);
  |.actionlist bf_actions
  || dasm_setup(Dst, bf_actions);
  |.code
|.endmacro

|.macro grow, n
  || dasm_growpc(Dst, n);
|.endmacro

|.macro end
  ||dasm_emit(Dst);
  ||dasm_free(Dst);
|.endmacro

#define export(type, name) ((type) labels[lbl_ ## name])

#define call(name, ...) \
  (labels[lbl_ ## name](__VA_ARGS__))

enum {
  RAX,
  RCX,
  RDX,
  RBX,
  RSP,
  RBP,
  RSI,
  RDI,
  R8,
  R9,
  R10,
  R11,
  R12,
  R13,
  R14,
  R15,
};
